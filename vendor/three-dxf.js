!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n(require("THREE")):"function"==typeof define&&define.amd?define(["THREE"],n):"object"==typeof exports?exports.ThreeDxf=n(require("THREE")):t.ThreeDxf=n(t.THREE)}("undefined"!=typeof self?self:this,function(__WEBPACK_EXTERNAL_MODULE__0__){return function(t){var n={};function e(g){if(n[g])return n[g].exports;var I=n[g]={i:g,l:!1,exports:{}};return t[g].call(I.exports,I,I.exports,e),I.l=!0,I.exports}return e.m=t,e.c=n,e.d=function(t,n,g){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:g})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var g=Object.create(null);if(e.r(g),Object.defineProperty(g,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var I in t)e.d(g,I,function(n){return t[n]}.bind(null,I));return g},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=1)}([function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__0__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UaHJlZUR4Zi9leHRlcm5hbCBcIlRIUkVFXCI/ZmMwMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18wX187Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: external "THREE"\nvar external_THREE_ = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/OrbitControls.js\n/**\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n */\n/*global THREE, console */\n\n// This set of controls performs orbiting, dollying (zooming), and panning. It maintains\n// the "up" direction as +Y, unlike the TrackballControls. Touch on tablet and phones is\n// supported.\n//\n//    Orbit - left mouse / touch: one finger move\n//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n//    Pan - right mouse, or arrow keys / touch: three finter swipe\n//\n// This is a drop-in replacement for (most) TrackballControls used in examples.\n// That is, include this js file and wherever you see:\n//    \tcontrols = new THREE.TrackballControls( camera );\n//      controls.target.z = 150;\n// Simple substitute "OrbitControls" and the control should work as-is.\n\n\n\nfunction OrbitControls( object, domElement ) {\n\n\tthis.object = object;\n\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\n\n\t// API\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// "target" sets the location of focus, where the control orbits around\n\t// and where it pans with respect to.\n\tthis.target = new external_THREE_["Vector3"]();\n\n\t// center is old, deprecated; use "target" instead\n\tthis.center = this.target;\n\n\t// This option actually enables dollying in and out; left as "zoom" for\n\t// backwards compatibility\n\tthis.noZoom = false;\n\tthis.zoomSpeed = 1.0;\n\n\t// Limits to how far you can dolly in and out\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// Set to true to disable this control\n\tthis.noRotate = false;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to true to disable this control\n\tthis.noPan = false;\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// Set to true to disable use of the keys\n\tthis.noKeys = false;\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t////////////\n\t// internals\n\n\tvar scope = this;\n\n\tvar EPS = 0.000001;\n\n\tvar rotateStart = new external_THREE_["Vector2"]();\n\tvar rotateEnd = new external_THREE_["Vector2"]();\n\tvar rotateDelta = new external_THREE_["Vector2"]();\n\n\tvar panStart = new external_THREE_["Vector2"]();\n\tvar panEnd = new external_THREE_["Vector2"]();\n\tvar panDelta = new external_THREE_["Vector2"]();\n\tvar panOffset = new external_THREE_["Vector3"]();\n\n\tvar offset = new external_THREE_["Vector3"]();\n\n\tvar dollyStart = new external_THREE_["Vector2"]();\n\tvar dollyEnd = new external_THREE_["Vector2"]();\n\tvar dollyDelta = new external_THREE_["Vector2"]();\n\n\tvar phiDelta = 0;\n\tvar thetaDelta = 0;\n\tvar scale = 1;\n\tvar pan = new external_THREE_["Vector3"]();\n\n\tvar lastPosition = new external_THREE_["Vector3"]();\n\n\tvar STATE = { NONE : -1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\n\n\tvar state = STATE.NONE;\n\n\t// for reset\n\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\n\t// events\n\n\tvar changeEvent = { type: \'change\' };\n\tvar startEvent = { type: \'start\'};\n\tvar endEvent = { type: \'end\'};\n\n\tthis.rotateLeft = function ( angle ) {\n\n\t\tif ( angle === undefined ) {\n\n\t\t\tangle = getAutoRotationAngle();\n\n\t\t}\n\n\t\tthetaDelta -= angle;\n\n\t};\n\n\tthis.rotateUp = function ( angle ) {\n\n\t\tif ( angle === undefined ) {\n\n\t\t\tangle = getAutoRotationAngle();\n\n\t\t}\n\n\t\tphiDelta -= angle;\n\n\t};\n\n\t// pass in distance in world space to move left\n\tthis.panLeft = function ( distance ) {\n\n\t\tvar te = this.object.matrix.elements;\n\n\t\t// get X column of matrix\n\t\tpanOffset.set( te[ 0 ], te[ 1 ], te[ 2 ] );\n\t\tpanOffset.multiplyScalar( - distance );\n\t\t\n\t\tpan.add( panOffset );\n\n\t};\n\n\t// pass in distance in world space to move up\n\tthis.panUp = function ( distance ) {\n\n\t\tvar te = this.object.matrix.elements;\n\n\t\t// get Y column of matrix\n\t\tpanOffset.set( te[ 4 ], te[ 5 ], te[ 6 ] );\n\t\tpanOffset.multiplyScalar( distance );\n\t\t\n\t\tpan.add( panOffset );\n\n\t};\n\t\n\t// pass in x,y of change desired in pixel space,\n\t// right and down are positive\n\tthis.pan = function ( deltaX, deltaY ) {\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\tif ( scope.object.fov !== undefined ) {\n\n\t\t\t// perspective\n\t\t\tvar position = scope.object.position;\n\t\t\tvar offset = position.clone().sub( scope.target );\n\t\t\tvar targetDistance = offset.length();\n\n\t\t\t// half of the fov is center to top of screen\n\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t// we actually don\'t use screenWidth, since perspective camera is fixed to screen height\n\t\t\tscope.panLeft( 2 * deltaX * targetDistance / element.clientHeight );\n\t\t\tscope.panUp( 2 * deltaY * targetDistance / element.clientHeight );\n\n\t\t} else if ( scope.object.top !== undefined ) {\n            \n\t\t\t// orthographic\n\t\t\tscope.panLeft( deltaX * (scope.object.right - scope.object.left) / element.clientWidth );\n\t\t\tscope.panUp( deltaY * (scope.object.top - scope.object.bottom) / element.clientHeight );\n\n\t\t} else {\n\n\t\t\t// camera neither orthographic or perspective\n\t\t\tconsole.warn( \'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.\' );\n\n\t\t}\n\n\t};\n\n\tthis.dollyIn = function ( dollyScale ) {\n\n\t\tif ( dollyScale === undefined ) {\n\n\t\t\tdollyScale = getZoomScale();\n\n\t\t}\n\n\t\tscale /= dollyScale;\n\n\t};\n\n\tthis.dollyOut = function ( dollyScale ) {\n\n\t\tif ( dollyScale === undefined ) {\n\n\t\t\tdollyScale = getZoomScale();\n\n\t\t}\n\n\t\tscale *= dollyScale;\n\n\t};\n\n\tthis.update = function () {\n        \n        if(scope.object.top !== undefined) {\n            this.object.top = (scale*this.object.top);\n            this.object.bottom = (scale*this.object.bottom);\n            this.object.left = (scale*this.object.left);\n            this.object.right = (scale*this.object.right);\n            \n            this.object.updateProjectionMatrix();\n\n        }\n            \n\n\t\tvar position = this.object.position;\n\n\t\toffset.copy( position ).sub( this.target );\n//\n//\t\t// angle from z-axis around y-axis\n//\n//\t\tvar theta = Math.atan2( offset.x, offset.z );\n//\n//\t\t// angle from y-axis\n//\n//\t\tvar phi = Math.atan2( Math.sqrt( offset.x * offset.x + offset.z * offset.z ), offset.y );\n//\n//\t\tif ( this.autoRotate ) {\n//\n//\t\t\tthis.rotateLeft( getAutoRotationAngle() );\n//\n//\t\t}\n//\n//\t\ttheta += thetaDelta;\n//\t\tphi += phiDelta;\n//\n//\t\t// restrict phi to be between desired limits\n//\t\tphi = Math.max( this.minPolarAngle, Math.min( this.maxPolarAngle, phi ) );\n//\n//\t\t// restrict phi to be betwee EPS and PI-EPS\n//\t\tphi = Math.max( EPS, Math.min( Math.PI - EPS, phi ) );\n//\n//\t\tvar radius = offset.length() * scale;\n//\n//\t\t// restrict radius to be between desired limits\n//\t\tradius = Math.max( this.minDistance, Math.min( this.maxDistance, radius ) );\n//\t\t\n//\t\t// move target to panned location\n\t\tthis.target.add( pan );\n//\t\t\n//\t\toffset.x = radius * Math.sin( phi ) * Math.sin( theta );\n//\t\toffset.y = radius * Math.cos( phi );\n//\t\toffset.z = radius * Math.sin( phi ) * Math.cos( theta );\n//\n\t\tposition.copy( this.target ).add( offset );\n\n\t\tthis.object.lookAt( this.target );\n\n\n//\t\tif ( lastPosition.distanceTo( this.object.position ) > 0 || scale !== 1 ) {\n\n\t\t\tthis.dispatchEvent( changeEvent );\n\n//\t\t\tlastPosition.copy( this.object.position );\n\n//\t\t}\n        \n//        thetaDelta = 0;\n//\t\tphiDelta = 0;\n\t\tscale = 1;\n\t\tpan.set( 0, 0, 0 );\n\n\t};\n\n\n\tthis.reset = function () {\n\n\t\tstate = STATE.NONE;\n\n\t\tthis.target.copy( this.target0 );\n\t\tthis.object.position.copy( this.position0 );\n\n\t\tthis.update();\n\n\t};\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction onMouseDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\t\tevent.preventDefault();\n\n\t\tif ( event.button === 0 ) {\n\t\t\tif ( scope.noRotate === true ) return;\n\n\t\t\tstate = STATE.ROTATE;\n\n\t\t\trotateStart.set( event.clientX, event.clientY );\n\n\t\t} else if ( event.button === 1 ) {\n\t\t\tif ( scope.noZoom === true ) return;\n\n\t\t\tstate = STATE.DOLLY;\n\n\t\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t\t} else if ( event.button === 2 ) {\n\t\t\tif ( scope.noPan === true ) return;\n\n\t\t\tstate = STATE.PAN;\n\n\t\t\tpanStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tscope.domElement.addEventListener( \'mousemove\', onMouseMove, false );\n\t\tscope.domElement.addEventListener( \'mouseup\', onMouseUp, false );\n\t\tscope.dispatchEvent( startEvent );\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\tif ( state === STATE.ROTATE ) {\n\n\t\t\tif ( scope.noRotate === true ) return;\n\n\t\t\trotateEnd.set( event.clientX, event.clientY );\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\tscope.rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\tscope.rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\t\trotateStart.copy( rotateEnd );\n\n\t\t} else if ( state === STATE.DOLLY ) {\n\n\t\t\tif ( scope.noZoom === true ) return;\n\n\t\t\tdollyEnd.set( event.clientX, event.clientY );\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\tscope.dollyIn();\n\n\t\t\t} else {\n\n\t\t\t\tscope.dollyOut();\n\n\t\t\t}\n\n\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t} else if ( state === STATE.PAN ) {\n\n\t\t\tif ( scope.noPan === true ) return;\n\n\t\t\tpanEnd.set( event.clientX, event.clientY );\n\t\t\tpanDelta.subVectors( panEnd, panStart );\n\t\t\t\n\t\t\tscope.pan( panDelta.x, panDelta.y );\n\n\t\t\tpanStart.copy( panEnd );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction onMouseUp( /* event */ ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tscope.domElement.removeEventListener( \'mousemove\', onMouseMove, false );\n\t\tscope.domElement.removeEventListener( \'mouseup\', onMouseUp, false );\n\t\tscope.dispatchEvent( endEvent );\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.noZoom === true ) return;\n\n\t\tevent.preventDefault();\n\n\t\tvar delta = 0;\n\n\t\tif ( event.wheelDelta !== undefined ) { // WebKit / Opera / Explorer 9\n\n\t\t\tdelta = event.wheelDelta;\n\n\t\t} else if ( event.detail !== undefined ) { // Firefox\n\n\t\t\tdelta = - event.detail;\n\n\t\t}\n\n\t\tif ( delta > 0 ) {\n\n\t\t\tscope.dollyOut();\n\n\t\t} else {\n\n\t\t\tscope.dollyIn();\n\n\t\t}\n\n\t\tscope.update();\n\t\tscope.dispatchEvent( startEvent );\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.noKeys === true || scope.noPan === true ) return;\n\t\t\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tscope.pan( 0, scope.keyPanSpeed );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tscope.pan( 0, - scope.keyPanSpeed );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tscope.pan( scope.keyPanSpeed, 0 );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tscope.pan( - scope.keyPanSpeed, 0 );\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction touchstart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\t// one-fingered touch: rotate\n\n\t\t\t\tif ( scope.noRotate === true ) return;\n\n\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\t// two-fingered touch: dolly\n\n\t\t\t\tif ( scope.noZoom === true ) return;\n\n\t\t\t\tstate = STATE.TOUCH_DOLLY;\n\n\t\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\t\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\t\t\t\tdollyStart.set( 0, distance );\n\t\t\t\tbreak;\n\n\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\tif ( scope.noPan === true ) return;\n\n\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tscope.dispatchEvent( startEvent );\n\n\t}\n\n\tfunction touchmove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1: // one-fingered touch: rotate\n\n\t\t\t\tif ( scope.noRotate === true ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return;\n\n\t\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\t\tscope.rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\t\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\t\tscope.rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\t\t\trotateStart.copy( rotateEnd );\n\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase 2: // two-fingered touch: dolly\n\n\t\t\t\tif ( scope.noZoom === true ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_DOLLY ) return;\n\n\t\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\t\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\t\tdollyEnd.set( 0, distance );\n\t\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\t\tscope.dollyOut();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tscope.dollyIn();\n\n\t\t\t\t}\n\n\t\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\tif ( scope.noPan === true ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_PAN ) return;\n\n\t\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\t\tpanDelta.subVectors( panEnd, panStart );\n\t\t\t\t\n\t\t\t\tscope.pan( panDelta.x, panDelta.y );\n\n\t\t\t\tpanStart.copy( panEnd );\n\n\t\t\t\tscope.update();\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction touchend( /* event */ ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tscope.dispatchEvent( endEvent );\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tthis.domElement.addEventListener( \'contextmenu\', function ( event ) { event.preventDefault(); }, false );\n\tthis.domElement.addEventListener( \'mousedown\', onMouseDown, false );\n\tthis.domElement.addEventListener( \'mousewheel\', onMouseWheel, false );\n\tthis.domElement.addEventListener( \'DOMMouseScroll\', onMouseWheel, false ); // firefox\n\n\tthis.domElement.addEventListener( \'touchstart\', touchstart, false );\n\tthis.domElement.addEventListener( \'touchend\', touchend, false );\n\tthis.domElement.addEventListener( \'touchmove\', touchmove, false );\n\n\twindow.addEventListener( \'keydown\', onKeyDown, false );\n\n};\n\nOrbitControls.prototype = Object.create( external_THREE_["EventDispatcher"].prototype );\n// CONCATENATED MODULE: ./src/index.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Viewer", function() { return Viewer; });\n\n\n\n// Three.js extension functions. Webpack doesn\'t seem to like it if we modify the THREE object directly.\nvar THREEx = { Math: {} };\n/**\n * Returns the angle in radians of the vector (p1,p2). In other words, imagine\n * putting the base of the vector at coordinates (0,0) and finding the angle\n * from vector (1,0) to (p1,p2).\n * @param  {Object} p1 start point of the vector\n * @param  {Object} p2 end point of the vector\n * @return {Number} the angle\n */\nTHREEx.Math.angle2 = function(p1, p2) {\n\tvar v1 = new external_THREE_["Vector2"](p1.x, p1.y);\n\tvar v2 = new external_THREE_["Vector2"](p2.x, p2.y);\n\tv2.sub(v1); // sets v2 to be our chord\n\tv2.normalize();\n\tif(v2.y < 0) return -Math.acos(v2.x);\n\treturn Math.acos(v2.x);\n};\n\n\nTHREEx.Math.polar = function(point, distance, angle) {\n\tvar result = {};\n\tresult.x = point.x + distance * Math.cos(angle);\n\tresult.y = point.y + distance * Math.sin(angle);\n\treturn result;\n};\n\n/**\n * Calculates points for a curve between two points\n * @param startPoint - the starting point of the curve\n * @param endPoint - the ending point of the curve\n * @param bulge - a value indicating how much to curve\n * @param segments - number of segments between the two given points\n */\nTHREEx.BulgeGeometry = function ( startPoint, endPoint, bulge, segments ) {\n\n\tvar vertex, i,\n\t\tcenter, p0, p1, angle,\n\t\tradius, startAngle,\n\t\tthetaAngle;\n\n\texternal_THREE_["Geometry"].call( this );\n\n\tthis.startPoint = p0 = startPoint ? new external_THREE_["Vector2"](startPoint.x, startPoint.y) : new external_THREE_["Vector2"](0,0);\n\tthis.endPoint = p1 = endPoint ? new external_THREE_["Vector2"](endPoint.x, endPoint.y) : new external_THREE_["Vector2"](1,0);\n\tthis.bulge = bulge = bulge || 1;\n\n\tangle = 4 * Math.atan(bulge);\n\tradius = p0.distanceTo(p1) / 2 / Math.sin(angle/2);\n\tcenter = THREEx.Math.polar(startPoint, radius, THREEx.Math.angle2(p0,p1) + (Math.PI / 2 - angle/2));\n\n\tthis.segments = segments = segments || Math.max( Math.abs(Math.ceil(angle/(Math.PI/18))), 6); // By default want a segment roughly every 10 degrees\n\tstartAngle = THREEx.Math.angle2(center, p0);\n\tthetaAngle = angle / segments;\n\n\n\tthis.vertices.push(new external_THREE_["Vector3"](p0.x, p0.y, 0));\n\n\tfor(i = 1; i <= segments - 1; i++) {\n\n\t\tvertex = THREEx.Math.polar(center, Math.abs(radius), startAngle + thetaAngle * i);\n\n\t\tthis.vertices.push(new external_THREE_["Vector3"](vertex.x, vertex.y, 0));\n\n\t}\n\n};\n\nTHREEx.BulgeGeometry.prototype = Object.create( external_THREE_["Geometry"].prototype );\n    \n/**\n * Viewer class for a dxf object.\n * @param {Object} data - the dxf object\n * @param {Object} parent - the parent element to which we attach the rendering canvas\n * @param {Number} width - width of the rendering canvas in pixels\n * @param {Number} height - height of the rendering canvas in pixels\n * @param {Object} font - a font loaded with THREE.FontLoader \n * @constructor\n */\nfunction Viewer(data, parent, width, height, font) {\n\n    createLineTypeShaders(data);\n\n    var scene = new external_THREE_["Scene"]();\n\n    // Create scene from dxf object (data)\n    var i, entity, obj, min_x, min_y, min_z, max_x, max_y, max_z;\n    var dims = {\n        min: { x: false, y: false, z: false},\n        max: { x: false, y: false, z: false}\n    };\n    for(i = 0; i < data.entities.length; i++) {\n        entity = data.entities[i];\n        obj = drawEntity(entity, data);\n\n        if (obj) {\n            var bbox = new external_THREE_["Box3"]().setFromObject(obj);\n            if (bbox.min.x && ((dims.min.x === false) || (dims.min.x > bbox.min.x))) dims.min.x = bbox.min.x;\n            if (bbox.min.y && ((dims.min.y === false) || (dims.min.y > bbox.min.y))) dims.min.y = bbox.min.y;\n            if (bbox.min.z && ((dims.min.z === false) || (dims.min.z > bbox.min.z))) dims.min.z = bbox.min.z;\n            if (bbox.max.x && ((dims.max.x === false) || (dims.max.x < bbox.max.x))) dims.max.x = bbox.max.x;\n            if (bbox.max.y && ((dims.max.y === false) || (dims.max.y < bbox.max.y))) dims.max.y = bbox.max.y;\n            if (bbox.max.z && ((dims.max.z === false) || (dims.max.z < bbox.max.z))) dims.max.z = bbox.max.z;\n            scene.add(obj);\n        }\n        obj = null;\n    }\n\n    width = width || parent.innerWidth;\n    height = height || parent.innerHeight;\n    var aspectRatio = width / height;\n\n    var upperRightCorner = { x: dims.max.x, y: dims.max.y };\n    var lowerLeftCorner = { x: dims.min.x, y: dims.min.y };\n\n    // Figure out the current viewport extents\n    var vp_width = upperRightCorner.x - lowerLeftCorner.x;\n    var vp_height = upperRightCorner.y - lowerLeftCorner.y;\n    var center = center || {\n        x: vp_width / 2 + lowerLeftCorner.x,\n        y: vp_height / 2 + lowerLeftCorner.y\n    };\n\n    // Fit all objects into current ThreeDXF viewer\n    var extentsAspectRatio = Math.abs(vp_width / vp_height);\n    if (aspectRatio > extentsAspectRatio) {\n        vp_width = vp_height * aspectRatio;\n    } else {\n        vp_height = vp_width / aspectRatio;\n    }\n    \n    var viewPort = {\n        bottom: -vp_height / 2,\n        left: -vp_width / 2,\n        top: vp_height / 2,\n        right: vp_width / 2,\n        center: {\n            x: center.x,\n            y: center.y\n        }\n    };\n\n    var camera = new external_THREE_["OrthographicCamera"](viewPort.left, viewPort.right, viewPort.top, viewPort.bottom, 1, 19);\n    camera.position.z = 10;\n    camera.position.x = viewPort.center.x;\n    camera.position.y = viewPort.center.y;\n\n    var renderer = this.renderer = new external_THREE_["WebGLRenderer"]();\n    renderer.setSize(width, height);\n    renderer.setClearColor(0xfffffff, 1);\n\n    parent.appendChild(renderer.domElement);\n    parent.style.display = \'block\';\n\n    //TODO: Need to make this an option somehow so others can roll their own controls.\n    var controls = new OrbitControls(camera, parent);\n    controls.target.x = camera.position.x;\n    controls.target.y = camera.position.y;\n    controls.target.z = 0;\n    controls.zoomSpeed = 3;\n\n    //Uncomment this to disable rotation (does not make much sense with 2D drawings).\n    //controls.enableRotate = false;\n\n    this.render = function() { renderer.render(scene, camera) };\n    controls.addEventListener(\'change\', this.render);\n    this.render();\n    controls.update();\n\n    this.resize = function(width, height) {\n        var originalWidth = renderer.domElement.width;\n        var originalHeight = renderer.domElement.height;\n\n        var hscale = width / originalWidth;\n        var vscale = height / originalHeight;\n\n\n        camera.top = (vscale * camera.top);\n        camera.bottom = (vscale * camera.bottom);\n        camera.left = (hscale * camera.left);\n        camera.right = (hscale * camera.right);\n\n//        camera.updateProjectionMatrix();\n\n        renderer.setSize(width, height);\n        renderer.setClearColor(0xfffffff, 1);\n        this.render();\n    };\n\n    function drawEntity(entity, data) {\n        var mesh;\n        if(entity.type === \'CIRCLE\' || entity.type === \'ARC\') {\n            mesh = drawArc(entity, data);\n        } else if(entity.type === \'LWPOLYLINE\' || entity.type === \'LINE\' || entity.type === \'POLYLINE\') {\n            mesh = drawLine(entity, data);\n        } else if(entity.type === \'TEXT\') {\n            mesh = drawText(entity, data);\n        } else if(entity.type === \'SOLID\') {\n            mesh = drawSolid(entity, data);\n        } else if(entity.type === \'POINT\') {\n            mesh = drawPoint(entity, data);\n        } else if(entity.type === \'INSERT\') {\n            mesh = drawBlock(entity, data);\n        } else if(entity.type === \'SPLINE\') {\n            mesh = drawSpline(entity, data);\n        } else if(entity.type === \'MTEXT\') {\n            mesh = drawMtext(entity, data);\n        } else if(entity.type === \'ELLIPSE\') {\n            mesh = drawEllipse(entity, data);\n        } else if(entity.type === \'DIMENSION\') {\n            var dimTypeEnum = entity.dimensionType & 7;\n            if(dimTypeEnum === 0) {\n                mesh = drawDimension(entity, data);\n            } else {\n                console.log("Unsupported Dimension type: " + dimTypeEnum);\n            }\n        }\n        else {\n            console.log("Unsupported Entity Type: " + entity.type);\n        }\n        return mesh;\n    }\n\n    function drawEllipse(entity, data) {\n        var color = getColor(entity, data);\n\n        var xrad = Math.sqrt(Math.pow(entity.majorAxisEndPoint.x,2) + Math.pow(entity.majorAxisEndPoint.y,2));\n        var yrad = xrad*entity.axisRatio;\n        var rotation = Math.atan2(entity.majorAxisEndPoint.y, entity.majorAxisEndPoint.x);\n\n        var curve = new external_THREE_["EllipseCurve"](\n            entity.center.x,  entity.center.y,\n            xrad, yrad,\n            entity.startAngle, entity.endAngle,\n            false, // Always counterclockwise\n            rotation\n        );\n\n        var points = curve.getPoints( 50 );\n        var geometry = new external_THREE_["BufferGeometry"]().setFromPoints( points );\n        var material = new external_THREE_["LineBasicMaterial"]( {  linewidth: 1, color : color } );\n\n        // Create the final object to add to the scene\n        var ellipse = new external_THREE_["Line"]( geometry, material );\n        return ellipse;\n    }\n\n    function drawMtext(entity, data) {\n        var color = getColor(entity, data);\n\n        var geometry = new external_THREE_["TextGeometry"]( entity.text, {\n            font: font,\n            size: entity.height * (4/5),\n            height: 1\n        });\n        var material = new external_THREE_["MeshBasicMaterial"]( {color: color} );\n        var text = new external_THREE_["Mesh"]( geometry, material );\n\n        // Measure what we rendered.\n        var measure = new external_THREE_["Box3"]();\n        measure.setFromObject( text );\n\n        var textWidth  = measure.max.x - measure.min.x;\n\n        // If the text ends up being wider than the box, it\'s supposed\n        // to be multiline. Doing that in threeJS is overkill.\n        if (textWidth > entity.width) {\n            console.log("Can\'t render this multipline MTEXT entity, sorry.", entity);\n            return undefined;\n        }\n\n        text.position.z = 0;\n        switch (entity.attachmentPoint) {\n            case 1:\n                // Top Left\n                text.position.x = entity.position.x;\n                text.position.y = entity.position.y - entity.height;\n            break;\n            case 2:\n                // Top Center\n                text.position.x = entity.position.x - textWidth/2;\n                text.position.y = entity.position.y - entity.height;\n            break;\n            case 3:\n                // Top Right\n                text.position.x = entity.position.x - textWidth;\n                text.position.y = entity.position.y - entity.height;\n            break;\n\n            case 4:\n                // Middle Left\n                text.position.x = entity.position.x;\n                text.position.y = entity.position.y - entity.height/2;\n            break;\n            case 5:\n                // Middle Center\n                text.position.x = entity.position.x - textWidth/2;\n                text.position.y = entity.position.y - entity.height/2;\n            break;\n            case 6:\n                // Middle Right\n                text.position.x = entity.position.x - textWidth;\n                text.position.y = entity.position.y - entity.height/2;\n            break;\n\n            case 7:\n                // Bottom Left\n                text.position.x = entity.position.x;\n                text.position.y = entity.position.y;\n            break;\n            case 8:\n                // Bottom Center\n                text.position.x = entity.position.x - textWidth/2;\n                text.position.y = entity.position.y;\n            break;\n            case 9:\n                // Bottom Right\n                text.position.x = entity.position.x - textWidth;\n                text.position.y = entity.position.y;\n            break;\n\n            default:\n                return undefined;\n        };\n\n        return text;\n    }\n\n    function drawSpline(entity, data) {\n        var color = getColor(entity, data);\n\n        var points = entity.controlPoints.map(function(vec) {\n            return new external_THREE_["Vector2"](vec.x, vec.y);\n        });\n\n        var interpolatedPoints = [];\n        var curve;\n        if (entity.degreeOfSplineCurve === 2 || entity.degreeOfSplineCurve === 3) {\n            for(var i = 0; i + 2 < points.length; i = i + 2) {\n        if (entity.degreeOfSplineCurve === 2) {\n                        curve = new external_THREE_["QuadraticBezierCurve"](points[i], points[i + 1], points[i + 2]);\n        } else {\n            curve = new external_THREE_["QuadraticBezierCurve3"](points[i], points[i + 1], points[i + 2]);\n        }\n                interpolatedPoints.push.apply(interpolatedPoints, curve.getPoints(50));\n            }\n        } else {\n            curve = new external_THREE_["SplineCurve"](points);\n            interpolatedPoints = curve.getPoints( 100 );\n        }\n\n        var geometry = new external_THREE_["BufferGeometry"]().setFromPoints( interpolatedPoints );\n        var material = new external_THREE_["LineBasicMaterial"]( { linewidth: 1, color : color } );\n        var splineObject = new external_THREE_["Line"]( geometry, material );\n\n        return splineObject;\n    }\n\n    function drawLine(entity, data) {\n        var geometry = new external_THREE_["Geometry"](),\n            color = getColor(entity, data),\n            material, lineType, vertex, startPoint, endPoint, bulgeGeometry,\n            bulge, i, line;\n\n        // create geometry\n        for(i = 0; i < entity.vertices.length; i++) {\n\n            if(entity.vertices[i].bulge) {\n                bulge = entity.vertices[i].bulge;\n                startPoint = entity.vertices[i];\n                endPoint = i + 1 < entity.vertices.length ? entity.vertices[i + 1] : geometry.vertices[0];\n\n                bulgeGeometry = new THREEx.BulgeGeometry(startPoint, endPoint, bulge);\n\n                geometry.vertices.push.apply(geometry.vertices, bulgeGeometry.vertices);\n            } else {\n                vertex = entity.vertices[i];\n                geometry.vertices.push(new external_THREE_["Vector3"](vertex.x, vertex.y, 0));\n            }\n\n        }\n        if(entity.shape) geometry.vertices.push(geometry.vertices[0]);\n\n\n        // set material\n        if(entity.lineType) {\n            lineType = data.tables.lineType.lineTypes[entity.lineType];\n        }\n\n        if(lineType && lineType.pattern && lineType.pattern.length !== 0) {\n            material = new external_THREE_["LineDashedMaterial"]({ color: color, gapSize: 4, dashSize: 4});\n        } else {\n            material = new external_THREE_["LineBasicMaterial"]({ linewidth: 1, color: color });\n        }\n\n        // if(lineType && lineType.pattern && lineType.pattern.length !== 0) {\n\n        //           geometry.computeLineDistances();\n\n        //           // Ugly hack to add diffuse to this. Maybe copy the uniforms object so we\n        //           // don\'t add diffuse to a material.\n        //           lineType.material.uniforms.diffuse = { type: \'c\', value: new THREE.Color(color) };\n\n        // \tmaterial = new THREE.ShaderMaterial({\n        // \t\tuniforms: lineType.material.uniforms,\n        // \t\tvertexShader: lineType.material.vertexShader,\n        // \t\tfragmentShader: lineType.material.fragmentShader\n        // \t});\n        // }else {\n        // \tmaterial = new THREE.LineBasicMaterial({ linewidth: 1, color: color });\n        // }\n\n        line = new external_THREE_["Line"](geometry, material);\n        return line;\n    }\n    \n    function drawArc(entity, data) {\n        var startAngle, endAngle;\n        if (entity.type === \'CIRCLE\') {\n            startAngle = entity.startAngle || 0;\n            endAngle = startAngle + 2 * Math.PI;\n        } else {\n            startAngle = entity.startAngle;\n            endAngle = entity.endAngle;\n        }\n\n        var curve = new external_THREE_["ArcCurve"](\n            0, 0,\n            entity.radius,\n            startAngle,\n            endAngle);\n\n        var points = curve.getPoints( 32 );\n        var geometry = new external_THREE_["BufferGeometry"]().setFromPoints( points );\n\n        var material = new external_THREE_["LineBasicMaterial"]({ color: getColor(entity, data) });\n\n        var arc = new external_THREE_["Line"](geometry, material);\n        arc.position.x = entity.center.x;\n        arc.position.y = entity.center.y;\n        arc.position.z = entity.center.z;\n\n        return arc;\n    }\n\n    function drawSolid(entity, data) {\n        var material, mesh, verts,\n            geometry = new external_THREE_["Geometry"]();\n\n        verts = geometry.vertices;\n        verts.push(new external_THREE_["Vector3"](entity.points[0].x, entity.points[0].y, entity.points[0].z));\n        verts.push(new external_THREE_["Vector3"](entity.points[1].x, entity.points[1].y, entity.points[1].z));\n        verts.push(new external_THREE_["Vector3"](entity.points[2].x, entity.points[2].y, entity.points[2].z));\n        verts.push(new external_THREE_["Vector3"](entity.points[3].x, entity.points[3].y, entity.points[3].z));\n\n        // Calculate which direction the points are facing (clockwise or counter-clockwise)\n        var vector1 = new external_THREE_["Vector3"]();\n        var vector2 = new external_THREE_["Vector3"]();\n        vector1.subVectors(verts[1], verts[0]);\n        vector2.subVectors(verts[2], verts[0]);\n        vector1.cross(vector2);\n\n        // If z < 0 then we must draw these in reverse order\n        if(vector1.z < 0) {\n            geometry.faces.push(new external_THREE_["Face3"](2, 1, 0));\n            geometry.faces.push(new external_THREE_["Face3"](2, 3, 1));\n        } else {\n            geometry.faces.push(new external_THREE_["Face3"](0, 1, 2));\n            geometry.faces.push(new external_THREE_["Face3"](1, 3, 2));\n        }\n\n\n        material = new external_THREE_["MeshBasicMaterial"]({ color: getColor(entity, data) });\n\n        return new external_THREE_["Mesh"](geometry, material);\n        \n    }\n\n    function drawText(entity, data) {\n        var geometry, material, text;\n\n        if(!font)\n            return console.warn(\'Text is not supported without a Three.js font loaded with THREE.FontLoader! Load a font of your choice and pass this into the constructor. See the sample for this repository or Three.js examples at http://threejs.org/examples/?q=text#webgl_geometry_text for more details.\');\n        \n        geometry = new external_THREE_["TextGeometry"](entity.text, { font: font, height: 0, size: entity.textHeight || 12 });\n\n        if (entity.rotation) {\n            var zRotation = entity.rotation * Math.PI / 180;\n            geometry.rotateZ(zRotation);\n        }\n\n        material = new external_THREE_["MeshBasicMaterial"]({ color: getColor(entity, data) });\n\n        text = new external_THREE_["Mesh"](geometry, material);\n        text.position.x = entity.startPoint.x;\n        text.position.y = entity.startPoint.y;\n        text.position.z = entity.startPoint.z;\n\n        return text;\n    }\n\n    function drawPoint(entity, data) {\n        var geometry, material, point;\n\n        geometry = new external_THREE_["Geometry"]();\n\n        geometry.vertices.push(new external_THREE_["Vector3"](entity.position.x, entity.position.y, entity.position.z));\n\n        // TODO: could be more efficient. PointCloud per layer?\n\n        var numPoints = 1;\n\n        var color = getColor(entity, data);\n        var colors = new Float32Array( numPoints*3 );\n        colors[0] = color.r;\n        colors[1] = color.g;\n        colors[2] = color.b;\n\n        geometry.colors = colors;\n        geometry.computeBoundingBox();\n\n        material = new external_THREE_["PointsMaterial"]( { size: 0.05, vertexColors: external_THREE_["VertexColors"] } );\n        point = new external_THREE_["Points"](geometry, material);\n        scene.add(point);\n    }\n\n    function drawDimension(entity, data) {\n        var block = data.blocks[entity.block];\n\n        if (!block || !block.entities) return null;\n\n        var group = new external_THREE_["Object3D"]();\n        // if(entity.anchorPoint) {\n        //     group.position.x = entity.anchorPoint.x;\n        //     group.position.y = entity.anchorPoint.y;\n        //     group.position.z = entity.anchorPoint.z;\n        // }\n\n        for(var i = 0; i < block.entities.length; i++) {\n            var childEntity = drawEntity(block.entities[i], data, group);\n            if(childEntity) group.add(childEntity);\n        }\n\n        return group;\n    }\n\n    function drawBlock(entity, data) {\n        var block = data.blocks[entity.name];\n        \n        if (!block.entities) return null;\n\n        var group = new external_THREE_["Object3D"]()\n        \n        if(entity.xScale) group.scale.x = entity.xScale;\n        if(entity.yScale) group.scale.y = entity.yScale;\n\n        if(entity.rotation) {\n            group.rotation.z = entity.rotation * Math.PI / 180;\n        }\n\n        if(entity.position) {\n            group.position.x = entity.position.x;\n            group.position.y = entity.position.y;\n            group.position.z = entity.position.z;\n        }\n        \n        for(var i = 0; i < block.entities.length; i++) {\n            var childEntity = drawEntity(block.entities[i], data, group);\n            if(childEntity) group.add(childEntity);\n        }\n\n        return group;\n    }\n\n    function getColor(entity, data) {\n        var color = 0x000000; //default\n        if(entity.color) color = entity.color;\n        else if(data.tables && data.tables.layer && data.tables.layer.layers[entity.layer])\n            color = data.tables.layer.layers[entity.layer].color;\n            \n        if(color == null || color === 0xffffff) {\n            color = 0x000000;\n        }\n        return color;\n    }\n\n    function createLineTypeShaders(data) {\n        var ltype, type;\n        if(!data.tables || !data.tables.lineType) return;\n        var ltypes = data.tables.lineType.lineTypes;\n\n        for(type in ltypes) {\n            ltype = ltypes[type];\n            if(!ltype.pattern) continue;\n            ltype.material = createDashedLineShader(ltype.pattern);\n        }\n    }\n\n    function createDashedLineShader(pattern) {\n        var i,\n            dashedLineShader = {},\n            totalLength = 0.0;\n\n        for(i = 0; i < pattern.length; i++) {\n            totalLength += Math.abs(pattern[i]);\n        }\n\n        dashedLineShader.uniforms = external_THREE_["UniformsUtils"].merge([\n\n            external_THREE_["UniformsLib"][ \'common\' ],\n            external_THREE_["UniformsLib"][ \'fog\' ],\n\n            {\n                \'pattern\': { type: \'fv1\', value: pattern },\n                \'patternLength\': { type: \'f\', value: totalLength }\n            }\n\n        ]);\n\n        dashedLineShader.vertexShader = [\n            \'attribute float lineDistance;\',\n\n            \'varying float vLineDistance;\',\n\n            external_THREE_["ShaderChunk"][ \'color_pars_vertex\' ],\n\n            \'void main() {\',\n\n            external_THREE_["ShaderChunk"][ \'color_vertex\' ],\n\n            \'vLineDistance = lineDistance;\',\n\n            \'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\',\n\n            \'}\'\n        ].join(\'\\n\');\n\n        dashedLineShader.fragmentShader = [\n            \'uniform vec3 diffuse;\',\n            \'uniform float opacity;\',\n\n            \'uniform float pattern[\' + pattern.length + \'];\',\n            \'uniform float patternLength;\',\n\n            \'varying float vLineDistance;\',\n\n            external_THREE_["ShaderChunk"][ \'color_pars_fragment\' ],\n            external_THREE_["ShaderChunk"][ \'fog_pars_fragment\' ],\n\n            \'void main() {\',\n\n            \'float pos = mod(vLineDistance, patternLength);\',\n\n            \'for ( int i = 0; i < \' + pattern.length + \'; i++ ) {\',\n            \'pos = pos - abs(pattern[i]);\',\n            \'if( pos < 0.0 ) {\',\n            \'if( pattern[i] > 0.0 ) {\',\n            \'gl_FragColor = vec4(1.0, 0.0, 0.0, opacity );\',\n            \'break;\',\n            \'}\',\n            \'discard;\',\n            \'}\',\n\n            \'}\',\n\n            external_THREE_["ShaderChunk"][ \'color_fragment\' ],\n            external_THREE_["ShaderChunk"][ \'fog_fragment\' ],\n\n            \'}\'\n        ].join(\'\\n\');\n\n        return dashedLineShader;\n    }\n\n    function findExtents(scene) { \n        for(var child of scene.children) {\n            var minX, maxX, minY, maxY;\n            if(child.position) {\n                minX = Math.min(child.position.x, minX);\n                minY = Math.min(child.position.y, minY);\n                maxX = Math.max(child.position.x, maxX);\n                maxY = Math.max(child.position.y, maxY);\n            }\n        }\n\n        return { min: { x: minX, y: minY }, max: { x: maxX, y: maxY }};\n    }\n\n}\n\n\n// Show/Hide helpers from https://plainjs.com/javascript/effects/hide-or-show-an-element-42/\n// get the default display style of an element\nfunction defaultDisplay(tag) {\n    var iframe = document.createElement(\'iframe\');\n    iframe.setAttribute(\'frameborder\', 0);\n    iframe.setAttribute(\'width\', 0);\n    iframe.setAttribute(\'height\', 0);\n    document.documentElement.appendChild(iframe);\n\n    var doc = (iframe.contentWindow || iframe.contentDocument).document;\n\n    // IE support\n    doc.write();\n    doc.close();\n\n    var testEl = doc.createElement(tag);\n    doc.documentElement.appendChild(testEl);\n    var display = (window.getComputedStyle ? getComputedStyle(testEl, null) : testEl.currentStyle).display\n    iframe.parentNode.removeChild(iframe);\n    return display;\n}\n\n// actual show/hide function used by show() and hide() below\nfunction showHide(el, show) {\n    var value = el.getAttribute(\'data-olddisplay\'),\n    display = el.style.display,\n    computedDisplay = (window.getComputedStyle ? getComputedStyle(el, null) : el.currentStyle).display;\n\n    if (show) {\n        if (!value && display === \'none\') el.style.display = \'\';\n        if (el.style.display === \'\' && (computedDisplay === \'none\')) value = value || defaultDisplay(el.nodeName);\n    } else {\n        if (display && display !== \'none\' || !(computedDisplay == \'none\'))\n            el.setAttribute(\'data-olddisplay\', (computedDisplay == \'none\') ? display : computedDisplay);\n    }\n    if (!show || el.style.display === \'none\' || el.style.display === \'\')\n        el.style.display = show ? value || \'\' : \'none\';\n}\n\n// helper functions\nfunction show(el) { showHide(el, true); }\nfunction hide(el) { showHide(el); }\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')}])});